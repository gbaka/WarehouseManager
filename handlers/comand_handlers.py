import telebot
import config
import handlers.helpers as helpers
from utils.database_manager import DatabaseManager
from utils.account_manager import AccountManager

BOT = telebot.TeleBot(token=config.TOKEN, parse_mode='Markdown')
DATABASE_MANAGER = DatabaseManager(config.db_name)
ACCOUNT_MANAGER = AccountManager()


@BOT.message_handler(
    commands=['start'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['start'])
)
def start(message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    BOT.send_message(
        chat_id=message.chat.id,
        text="*üõ† –°–ª–∞–≤–∞ —Ç—Ä—É–¥—É!*\n–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
        reply_markup=helpers.create_start_keyboard(),
        parse_mode='Markdown'
    )


@BOT.message_handler(
    commands=['auth', 'register', 'reg'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['auth'])
)
def auth(message):
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É
             /auth <key>"""
    command = helpers.is_valid(message.text, r"/(auth|register|reg)\s+.+(\s+|$)")
    if command:
        current_access_level = ACCOUNT_MANAGER.get_access_level(message.from_user.id)
        if current_access_level:
            BOT.send_message(
                chat_id=message.chat.id,
                text=f"‚öôÔ∏è *–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {'—Ä–∞–±–æ—Ç–Ω–∏–∫' if current_access_level == 1 else '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}*\n"
                     f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /unauth —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
            )
            return
        new_access_level = DATABASE_MANAGER.check_auth(command[1])
        if new_access_level == 0:
            BOT.send_message(
                chat_id=message.chat.id,
                text="‚ùå *–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."

            )
            return
        BOT.send_message(
            chat_id=message.chat.id,
            text=f"üîë *–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ {'—Ä–∞–±–æ—Ç–Ω–∏–∫' if new_access_level == 1 else '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}*"
        )
        ACCOUNT_MANAGER.auth(message.from_user.id, new_access_level)
        ACCOUNT_MANAGER.show()
        return
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.*\n\n'
             '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n'
             '`/auth <key>`'
    )


@BOT.message_handler(
    commands=['unauth', 'unregister', 'unreg'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['unauth'])
)
def unauth(message):
    """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
             /unauth <key>"""
    current_access_level = ACCOUNT_MANAGER.get_access_level(message.from_user.id)
    if not current_access_level:
        BOT.send_message(
            chat_id=message.chat.id,
            text=f'‚öôÔ∏è *–í—ã –∏ —Ç–∞–∫ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*'
        )
        return
    ACCOUNT_MANAGER.unauth(message.from_user.id)
    BOT.send_message(
        chat_id=message.chat.id,
        text=f'üö™ *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞*'
    )


@BOT.message_handler(
    commands=['add'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['add'])
)
def add_product(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                /add <name> <amount> <sell_price> <purchase_price>"""
    command = helpers.is_valid(message.text, r"/add\s+.+\s+\d{1,16}\s+\d{1,16}\s+\d{1,16}(\s+|$)")
    if command:
        status = DATABASE_MANAGER.add_product(command[1], command[2], command[3], command[4])
        if status:
            BOT.send_message(
                chat_id=message.chat.id,
                text=f'‚öôÔ∏è *–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.*\n'
                     f'ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞: {status}'
            )
            return
        product_id = DATABASE_MANAGER.get_next_product_id() - 1
        BOT.send_message(
            chat_id=message.chat.id,
            text='‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.*\n\n'
                 f'_ID —Ç–æ–≤–∞—Ä–∞:_  {product_id}\n'
                 f'_–ò–º—è —Ç–æ–≤–∞—Ä–∞:_  "{command[1]}"\n'
                 f'_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:_  {command[2]}\n'
                 f'_–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:_  {command[3]}\n'
                 f'_–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:_  {command[4]}\n'
        )
        return
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.*\n\n'
             '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n'
             '`/add <name> <amount> <sell> <purchase>`'

    )


@BOT.message_handler(
    commands=['setsp', 'setpp'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['setp'])
)
def set_price_of_product(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞
                  (/setsp|/setpp) <ID> <new_cost> """
    command = helpers.is_valid(message.text, r"/(setsp|setpp)\s+\d{1,8}\s+\d{1,16}(\s+|$)")
    if command:
        if command[0] == '/setsp':
            status = DATABASE_MANAGER.setsp(command[1], command[2])
            price_type = '–ø—Ä–æ–¥–∞–∂–∏'
        else:
            status = DATABASE_MANAGER.setpp(command[1], command[2])
            price_type = '–ø–æ–∫—É–ø–∫–∏'
        if status:
            BOT.send_message(
                chat_id=message.chat.id,
                text=f'‚úÖ *–¶–µ–Ω–∞ {price_type} —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n'
                     f'_ID —Ç–æ–≤–∞—Ä–∞:_  {status[0]}\n'
                     f'_–ò–º—è —Ç–æ–≤–∞—Ä–∞:_  "{status[1]}"\n'
                     f'_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:_  {status[2]}\n'
                     f'_–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:_  {status[3]}\n'
                     f'_–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:_  {status[4]}\n'
            )
            return
        BOT.send_message(
            chat_id=message.chat.id,
            text='‚öôÔ∏è *–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç –≤ –±–∞–∑–µ*'
        )
        return
    command = message.text.split()[0]
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.*\n\n'
             f'–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n'
             f'`{command} <ID> <price>`'
    )


@BOT.message_handler(
    commands=['seta'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['seta'])
)
def set_amount_of_product(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
                      /seta <ID> <new_amount>"""
    command = helpers.is_valid(message.text, r"/seta\s+\d{1,8}\s+\d{1,16}(\s+|$)")
    if command:
        status = DATABASE_MANAGER.seta(command[1], command[2])
        if status:
            BOT.send_message(
                chat_id=message.chat.id,
                text='‚úÖ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ*\n\n'
                     f'_ID —Ç–æ–≤–∞—Ä–∞:_  {status[0]}\n'
                     f'_–ò–º—è —Ç–æ–≤–∞—Ä–∞:_  "{status[1]}"\n'
                     f'_–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:_  {status[2]}\n'
                     f'_–°—Ç–æ–∏–º–æ—Å—Ç—å:_  {status[3]}\n'
            )
            return
        BOT.send_message(
            chat_id=message.chat.id,
            text='‚öôÔ∏è *–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç –≤ –±–∞–∑–µ*'
        )
        return
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.*\n\n'
             '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:'
             '`/seta <ID> <amount>`'
    )


@BOT.message_handler(
    commands=['del'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['del'])
)
def del_product(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                     /del <ID>"""
    command = helpers.is_valid(message.text, r"/del\s+\d{1,8}(\s+|$)")
    if command:
        status = DATABASE_MANAGER.del_product(command[1])
        if status:
            BOT.send_message(
                chat_id=message.chat.id,
                text='üóëÔ∏è *–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.*\n\n'
                     f'_ID —Ç–æ–≤–∞—Ä–∞:_  {status[0]}\n'
                     f'_–ò–º—è —Ç–æ–≤–∞—Ä–∞:_  "{status[1]}"\n'
            )
            return
        BOT.send_message(
            chat_id=message.chat.id,
            text='‚öôÔ∏è *–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç –≤ –±–∞–∑–µ*'
        )
        return
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.*\n\n'
             '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:'
             '`/del <ID>`'
    )
    pass


# @BOT.message_handler(
#     commands=['info'],
#     func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['info'])
# )
# def info_of_product(message):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
#     BOT.send_message(chat_id=message.chat.id, text='access successful')
#     pass

@BOT.message_handler(
    commands=['info'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['info'])
)
def info(message):
    user_id = message.from_user.id
    BOT.send_message(
        chat_id=message.chat.id,
        text=helpers.get_info(user_id, ACCOUNT_MANAGER.get_access_level(user_id))
    )


@BOT.message_handler(
    commands=['catalog'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['catalog'])
)
def show_catalog(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
               /catalog <page=1>"""
    command = helpers.is_valid(message.text, r"(/catalog|–ö–∞—Ç–∞–ª–æ–≥)((\s+\d+)|\s*)(\s+|$)")
    if command:
        page = 1 if len(command) == 1 else int(command[1])
        page = 1 if page == 0 else page
        status = DATABASE_MANAGER.get_catalog_page(page)
        if status:
            BOT.send_message(
                chat_id=message.chat.id,
                reply_markup=helpers.create_flip_keyboard(page, DATABASE_MANAGER.get_amount_catalog_pages(), 'catalog'),
                text=helpers.create_catalog_page(
                    status, page, DATABASE_MANAGER.get_amount_goods(),
                    ACCOUNT_MANAGER.is_admin(message.from_user.id)
                )
            )
            return
        if page == 1:
            BOT.send_message(
                chat_id=message.chat.id,
                text='üìÇ *–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç*'
            )
            return
        BOT.send_message(
            chat_id=message.chat.id,
            text='‚öôÔ∏è *–£–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ*'
        )
        return
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ*.\n\n'
             '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n'
             '`/catalog <page=0>`'
    )


@BOT.message_handler(
    commands=['journal'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['journal'])
)
def show_journal(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∂—É—Ä–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞–∫—É–ø–æ–∫
               /journal <page=1>"""
    command = helpers.is_valid(message.text, r"/journal((\s+\d+)|\s*)(\s+|$)")
    if command:
        page = 1 if len(command) == 1 else int(command[1])
        page = 1 if page == 0 else page
        ###
        status = DATABASE_MANAGER.get_journal_page(page)
        if status:
            BOT.send_message(
                chat_id=message.chat.id,
                reply_markup=helpers.create_flip_keyboard(page, DATABASE_MANAGER.get_amount_journal_pages(), 'journal'),
                text=helpers.create_journal_page(
                    status, page, DATABASE_MANAGER.get_amount_journal_records()
                )
            )
            return
        if page == 1:
            BOT.send_message(
                chat_id=message.chat.id,
                text='üìÇ *–ñ—É—Ä–Ω–∞–ª —É—á–µ—Ç–∞ –ø—É—Å—Ç*'
            )
            return
        BOT.send_message(
            chat_id=message.chat.id,
            text='‚öôÔ∏è *–£–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç –≤ –∂—É—Ä–Ω–∞–ª–µ —É—á–µ—Ç–∞*'
        )
        return
    BOT.send_message(
        chat_id=message.chat.id,
        text='‚ùå *–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ*.\n\n'
             '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n'
             '`/journal <page=1>`'
    )

@BOT.message_handler(
    commands=['buy'],
    func=lambda mes: ACCOUNT_MANAGER.check_access(mes.from_user.id, config.commands_access['buy'])
)
def buy_product(message):
    command = helpers.is_valid(message.text, r"/buy\s+\d{1,8}\s+d{1,16}(\s+|\$)")
    if command:

        pass


@BOT.message_handler(
    commands=['myrole'],
    func=lambda call: ACCOUNT_MANAGER.check_access(call.from_user.id, config.commands_access['myrole'])
)
def get_my_role(message):
    access_level = ACCOUNT_MANAGER.get_access_level(message.from_user.id)
    match access_level:
        case 0:
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        case 1:
            role = "–†–∞–±–æ—Ç–Ω–∏–∫"
        case 2:
            role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        case _:
            role = "Unknown"
    BOT.send_message(
        chat_id=message.chat.id,
        text=f"‚öôÔ∏è –í–∞—à–∞ —Ä–æ–ª—å: *{role}*"
    )


@BOT.message_handler(
    content_types=['text']
)
def keyboard_response(message):
    if message.chat.type == 'private':
        if message.text == '–ö–∞—Ç–∞–ª–æ–≥':
            show_catalog(message)
        if message.text == '–°–ø—Ä–∞–≤–∫–∞':
            info(message)


@BOT.callback_query_handler(
    func=lambda call: ACCOUNT_MANAGER.check_access(call.from_user.id, config.commands_access['catalog'])
)
def flip_page(call):
    command = helpers.is_valid(call.data, r'catalog \d+')
    if command:
        to_page = int(command[1])
        max_page = DATABASE_MANAGER.get_amount_catalog_pages()
        if 1 <= to_page <= max_page:
            page_record = DATABASE_MANAGER.get_catalog_page(to_page)
            BOT.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.id,
                reply_markup=helpers.create_flip_keyboard(to_page, max_page, 'catalog'),
                text=helpers.create_catalog_page(
                    page_record, to_page, DATABASE_MANAGER.get_amount_goods(),
                    ACCOUNT_MANAGER.is_admin(call.from_user.id)
                )
            )
    BOT.answer_callback_query(callback_query_id=call.id)
